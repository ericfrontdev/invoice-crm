generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  company       String?
  phone         String?
  address       String?
  plan          String?   @default("free")
  paymentMethod String?
  createdAt     DateTime  @default(now())
  emailVerified DateTime?
  image         String?
  password      String?

  // Champs spécifiques Québec
  neq           String?   // Numéro d'entreprise du Québec
  tpsNumber     String?   // Numéro TPS (fédéral)
  tvqNumber     String?   // Numéro TVQ (provincial)
  chargesTaxes  Boolean   @default(false) // Charge les taxes TPS/TVQ (obligatoire si CA > 30k$)

  // Programme beta
  betaTester       Boolean @default(false) // Identifie les beta testeurs
  lifetimeDiscount Int     @default(0)     // Pourcentage de réduction à vie (ex: 50 pour 50%)

  // Configuration des paiements (pour recevoir des paiements des clients)
  paymentProvider  String? // "paypal" ou "stripe"
  paypalEmail      String? // Email PayPal pour recevoir les paiements
  stripeAccountId  String? // ID du compte Stripe Connect

  accounts      Account[]
  clients       Client[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SuperAdmin {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
}

model Client {
  id            String         @id @default(cuid())
  name          String
  company       String?
  email         String
  phone         String?
  address       String?
  website       String?
  archived      Boolean        @default(false)
  archivedAt    DateTime?
  createdAt     DateTime       @default(now())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  invoices      Invoice[]
  unpaidAmounts UnpaidAmount[]
  projects      Project[]
  notes         Note[]
}

model UnpaidAmount {
  id          String    @id @default(cuid())
  amount      Float
  description String
  date        DateTime  @default(now())
  status      String    @default("unpaid")
  clientId    String
  dueDate     DateTime?
  invoiceId   String?
  client      Client    @relation(fields: [clientId], references: [id])
  invoice     Invoice?  @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
}

model Invoice {
  id            String         @id @default(cuid())
  number        String         @unique
  status        String         @default("draft") // draft, sent, paid, cancelled

  // Montants avec taxes québécoises
  subtotal      Float          @default(0) // Montant avant taxes
  tps           Float          @default(0) // TPS 5%
  tvq           Float          @default(0) // TVQ 9.975%
  total         Float          // Total incluant taxes

  // Informations de paiement
  paidAt                DateTime? // Date du paiement
  paymentProvider       String?   // "paypal" ou "stripe"
  paymentTransactionId  String?   // ID de la transaction PayPal/Stripe

  createdAt     DateTime       @default(now())
  dueDate       DateTime?      // Date d'échéance de la facture
  clientId      String
  projectId     String?
  client        Client         @relation(fields: [clientId], references: [id])
  project       Project?       @relation(fields: [projectId], references: [id])
  items         InvoiceItem[]
  unpaidAmounts UnpaidAmount[]
}

model InvoiceItem {
  id          String    @id @default(cuid())
  invoiceId   String
  description String
  amount      Float     // Montant avant taxes
  date        DateTime
  dueDate     DateTime?
  invoice     Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      String        @default("active")
  budget      Float?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  clientId    String
  client      Client        @relation(fields: [clientId], references: [id])
  invoices    Invoice[]
  files       ProjectFile[]
}

model ProjectFile {
  id        String   @id @default(cuid())
  filename  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  uploadedAt DateTime @default(now())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Revenue {
  id          String   @id @default(cuid())
  description String
  amount      Float
  date        DateTime @default(now())
  category    String?
  userId      String
  createdAt   DateTime @default(now())
}

model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Float
  date        DateTime @default(now())
  category    String?
  userId      String
  createdAt   DateTime @default(now())
}
