// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String?   // null for OAuth users
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  clients       Client[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SuperAdmin {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
}

model Client {
  id            String         @id @default(cuid())
  name          String
  company       String?
  email         String
  phone         String?
  address       String?
  website       String?
  createdAt     DateTime       @default(now())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  unpaidAmounts UnpaidAmount[]
  invoices      Invoice[]
}

model UnpaidAmount {
  id          String    @id @default(cuid())
  amount      Float
  description String
  date        DateTime  @default(now())
  dueDate     DateTime?
  status      String    @default("unpaid") // "unpaid" | "invoiced"
  clientId    String
  client      Client    @relation(fields: [clientId], references: [id])
  // Optionnel: rattacher le montant à la facture qui l'a consommé
  invoiceId   String?
  invoice     Invoice?  @relation(fields: [invoiceId], references: [id])
}

model Invoice {
  id        String   @id @default(cuid())
  number    String   @unique
  status    String   @default("draft") // "draft" | "sent" | "paid"
  total     Float
  createdAt DateTime @default(now())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  items     InvoiceItem[]
  unpaidAmounts UnpaidAmount[]
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  description String
  amount      Float
  date        DateTime
  dueDate     DateTime?
}
