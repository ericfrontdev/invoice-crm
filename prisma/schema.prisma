generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  company       String?
  phone         String?
  address       String?
  plan          String?   @default("free")
  paymentMethod String?
  createdAt     DateTime  @default(now())
  emailVerified DateTime?
  image         String?
  password      String?
  logo          String?   // URL du logo pour les factures

  // Champs spécifiques Québec
  neq           String?   // Numéro d'entreprise du Québec
  tpsNumber     String?   // Numéro TPS (fédéral)
  tvqNumber     String?   // Numéro TVQ (provincial)
  chargesTaxes  Boolean   @default(false) // Charge les taxes TPS/TVQ (obligatoire si CA > 30k$)

  // Programme beta
  betaTester       Boolean @default(false) // Identifie les beta testeurs
  lifetimeDiscount Int     @default(0)     // Pourcentage de réduction à vie (ex: 50 pour 50%)

  // Configuration des paiements (pour recevoir des paiements des clients)
  paymentProvider  String? // "paypal" ou "stripe"
  paypalEmail      String? // Email PayPal pour recevoir les paiements
  stripeAccountId  String? // ID du compte Stripe Connect

  // Configuration des rappels de paiement
  autoRemindersEnabled Boolean @default(false) // Activer les rappels automatiques
  reminderMiseEnDemeureTemplate String? @default("Madame, Monsieur,\n\nMalgré nos précédents rappels, nous constatons que la facture ci-dessous demeure impayée.\n\nNous vous prions de bien vouloir régulariser votre situation dans les plus brefs délais, faute de quoi nous serons contraints d'entamer des procédures de recouvrement.\n\nCordialement,") // Template de mise en demeure personnalisable

  accounts      Account[]
  clients       Client[]
  sessions      Session[]
  feedbacks     Feedback[]
  feedbackMessages FeedbackMessage[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SuperAdmin {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
}

model Client {
  id            String         @id @default(cuid())
  name          String
  company       String?
  email         String
  phone         String?
  address       String?
  website       String?
  archived      Boolean        @default(false)
  archivedAt    DateTime?
  createdAt     DateTime       @default(now())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  invoices      Invoice[]
  unpaidAmounts UnpaidAmount[]
  projects      Project[]
  notes         Note[]

  @@index([userId])
  @@index([email])
  @@index([archived])
  @@index([createdAt])
}

model UnpaidAmount {
  id          String    @id @default(cuid())
  amount      Float
  description String
  date        DateTime  @default(now())
  status      String    @default("unpaid")
  clientId    String
  dueDate     DateTime?
  invoiceId   String?
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoice     Invoice?  @relation(fields: [invoiceId], references: [id], onDelete: SetNull)

  @@index([clientId])
  @@index([invoiceId])
  @@index([status])
  @@index([dueDate])
}

model Invoice {
  id            String         @id @default(cuid())
  number        String         @unique
  status        String         @default("draft") // draft, sent, paid, cancelled

  // Montants avec taxes québécoises
  subtotal      Float          @default(0) // Montant avant taxes
  tps           Float          @default(0) // TPS 5%
  tvq           Float          @default(0) // TVQ 9.975%
  total         Float          // Total incluant taxes

  // Informations de paiement
  paidAt                DateTime? // Date du paiement
  paymentProvider       String?   // "paypal" ou "stripe"
  paymentTransactionId  String?   // ID de la transaction PayPal/Stripe

  createdAt     DateTime       @default(now())
  dueDate       DateTime?      // Date d'échéance de la facture
  clientId      String
  projectId     String?
  client        Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  project       Project?       @relation(fields: [projectId], references: [id], onDelete: SetNull)
  items         InvoiceItem[]
  unpaidAmounts UnpaidAmount[]
  reminders     InvoiceReminder[]

  @@index([clientId])
  @@index([projectId])
  @@index([status])
  @@index([dueDate])
  @@index([createdAt])
  @@index([status, dueDate]) // Index composite pour le cron job des rappels
}

model InvoiceReminder {
  id          String   @id @default(cuid())
  invoiceId   String
  type        String   // "reminder1", "reminder2", "reminder3", "mise_en_demeure"
  sentAt      DateTime @default(now())
  sentTo      String   // Email du destinataire
  status      String   @default("sent") // "sent", "error"
  errorMessage String?
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([type])
  @@index([sentAt])
  @@index([status])
}

model InvoiceItem {
  id          String    @id @default(cuid())
  invoiceId   String
  description String
  amount      Float     // Montant avant taxes
  date        DateTime
  dueDate     DateTime?
  invoice     Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([date])
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      String        @default("active")
  budget      Float?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  clientId    String
  client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoices    Invoice[]
  files       ProjectFile[]

  @@index([clientId])
  @@index([status])
  @@index([createdAt])
}

model ProjectFile {
  id        String   @id @default(cuid())
  filename  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  uploadedAt DateTime @default(now())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([uploadedAt])
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([createdAt])
}

model Revenue {
  id          String   @id @default(cuid())
  description String
  amount      Float
  date        DateTime @default(now())
  category    String?
  userId      String
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([date])
  @@index([category])
  @@index([userId, date]) // Index composite pour les queries comptables par période
}

model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Float
  date        DateTime @default(now())
  category    String?
  userId      String
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([date])
  @@index([category])
  @@index([userId, date]) // Index composite pour les queries comptables par période
}

model Feedback {
  id          String   @id @default(cuid())

  // Contenu
  type        String   // "bug", "feature", "improvement", "other"
  severity    String   // "critical", "high", "medium", "low" (choisi par user)
  title       String   // Résumé court
  message     String   // Description détaillée
  screenshot  String?  // URL Cloudinary

  // Contexte automatique
  pageUrl     String   // URL où feedback créé
  pageTitle   String?  // Titre de la page
  userAgent   String?  // Browser/OS
  screenSize  String?  // Ex: "1920x1080"
  deviceType  String?  // "desktop", "mobile", "tablet"

  // Utilisateur (peut être null si anonyme)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  isAnonymous Boolean  @default(false)

  // Gestion admin
  status      String   @default("new") // "new", "reviewing", "in_progress", "resolved", "wont_fix"
  priority    String   @default("medium") // "low", "medium", "high", "critical" (assigné par admin)
  adminNote   String?  // Notes internes admin
  linkedIssue String?  // URL GitHub issue / Trello card

  // Dates
  createdAt   DateTime @default(now())
  viewedAt    DateTime? // Première fois que admin l'a vu
  resolvedAt  DateTime?

  // Relations
  messages    FeedbackMessage[]

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([severity])
  @@index([createdAt])
  @@index([priority])
}

model FeedbackMessage {
  id         String   @id @default(cuid())
  feedbackId String
  authorId   String
  authorType String   // "admin" | "user"
  message    String
  createdAt  DateTime @default(now())

  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([feedbackId])
  @@index([authorId])
  @@index([createdAt])
}

model SystemSettings {
  id                    String    @id @default(cuid())
  feedbackSystemEnabled Boolean   @default(true)
  betaEndDate           DateTime? // Date de fin de la période bêta (null = pas de limite)
  updatedAt             DateTime  @updatedAt
  updatedBy             String?   // Super admin qui a modifié
}
